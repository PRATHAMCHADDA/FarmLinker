{"version":3,"file":"index.js","sources":["../../src/Verify/tool.ts","../../src/Verify/index.tsx"],"sourcesContent":["function getRandomNumberByRange(start: number, end: number) {\n  return Math.round(Math.random() * (end - start) + start);\n}\n\nfunction sum(x: number, y: number) {\n  return x + y;\n}\n\nfunction square(x: number) {\n  return x * x;\n}\n\nexport { getRandomNumberByRange, sum, square };\n","import React, { useRef, useState, useEffect, ReactNode, memo } from 'react';\nimport { getRandomNumberByRange, sum, square } from './tool';\n\ninterface verifyType {\n  spliced: boolean;\n  verified: boolean; // Simply verify the drag trajectory, when it is zero, it means that there is no fluctuation up and down the Y axis, which may be non-human operation\n  left: number; // Move position of the slider\n  destX: number; // The target position of the slider\n}\n\ninterface IverifyProp {\n  /**\n   * @description   canvaswidth\n   * @default       320\n   */\n  width?: number;\n  /**\n   * @description   canvasheight\n   * @default       160\n   */\n  height?: number;\n  /**\n   * @description   slider side length\n   * @default       42\n   */\n  l?: number;\n  /**\n   * @description   slider radius\n   * @default       9\n   */\n  r?: number;\n  /**\n   * @description   Is it visible\n   * @default       true\n   */\n  visible?: boolean;\n  /**\n   * @description   slider text\n   * @default       Swipe right to fill the puzzle\n   */\n  text?: string | ReactNode;\n  /**\n   * @description   refresh button icon, It is the url address of the icon\n   * @default       -\n   */\n  refreshIcon?: string;\n  /**\n   * @description   The url address used to get random pictures\n   * @default       https://picsum.photos/${id}/${width}/${height}, specific referencehttps://picsum.photos/, Just implement a similar interface\n   */\n  imgUrl?: string;\n  /**\n   * @description   Callback when dragging the slider, The parameter is the dragging distance of the current slider\n   * @default       (l: number):void => {}\n   */\n  onDraw?: (l: number) => void;\n  /**\n   * @description   User's custom validation logic\n   * @default       (arg: verifyType) => verifyType\n   */\n  onCustomverify?: (arg: verifyType) => verifyType;\n  /**\n   * @description   Verification successful callback\n   * @default       ():void => {}\n   */\n  onSuccess?: VoidFunction;\n  /**\n   * @description   Validation failure callback\n   * @default       ():void => {}\n   */\n  onFail?: VoidFunction;\n  /**\n   * @description   Callback on refresh\n   * @default       ():void => {}\n   */\n  onRefresh?: VoidFunction;\n}\nconst Verify = ({\n  width = 320,\n  height = 160,\n  l = 42,\n  r = 9,\n  imgUrl,\n  text,\n  refreshIcon = 'https://raw.githubusercontent.com/venkatmcajj/react-puzzle-captcha/master/docs/icon12.png',\n  visible = true,\n  onDraw,\n  onCustomverify,\n  onSuccess,\n  onFail,\n  onRefresh,\n}: IverifyProp) => {\n  const [isLoading, setLoading] = useState(false);\n  const [sliderLeft, setSliderLeft] = useState(0);\n  const [sliderClass, setSliderClass] = useState('sliderContainer');\n  const [textTip, setTextTip] = useState(text);\n  const canvasRef = useRef<any>(null);\n  const blockRef = useRef<any>(null);\n  const imgRef = useRef<any>(null);\n  const isMouseDownRef = useRef<boolean>(false);\n  const trailRef = useRef<number[]>([]);\n  const originXRef = useRef<number>(0);\n  const originYRef = useRef<number>(0);\n  const xRef = useRef<number>(0);\n  const yRef = useRef<number>(0);\n  const PI = Math.PI;\n  const L = l + r * 2 + 3; // The actual side length of the slider\n\n  const drawPath = (\n    ctx: any,\n    x: number,\n    y: number,\n    operation: 'fill' | 'clip',\n  ) => {\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.arc(x + l / 2, y - r + 2, r, 0.72 * PI, 2.26 * PI);\n    ctx.lineTo(x + l, y);\n    ctx.arc(x + l + r - 2, y + l / 2, r, 1.21 * PI, 2.78 * PI);\n    ctx.lineTo(x + l, y + l);\n    ctx.lineTo(x, y + l);\n    ctx.arc(x + r - 2, y + l / 2, r + 0.4, 2.76 * PI, 1.24 * PI, true);\n    ctx.lineTo(x, y);\n    ctx.lineWidth = 2;\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';\n    ctx.stroke();\n    ctx.globalCompositeOperation = 'destination-over';\n    operation === 'fill' ? ctx.fill() : ctx.clip();\n  };\n\n  const getRandomImgSrc = () => {\n    return (\n      imgUrl ||\n      `https://picsum.photos/id/${getRandomNumberByRange(\n        0,\n        1084,\n      )}/${width}/${height}`\n    );\n  };\n\n  const createImg = (onload: VoidFunction) => {\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.onload = onload;\n    img.onerror = () => {\n      (img as any).setSrc(getRandomImgSrc()); // Reload other images when image loading fails\n    };\n\n    (img as any).setSrc = (src: string) => {\n      const isIE = window.navigator.userAgent.indexOf('Trident') > -1;\n      if (isIE) {\n        // IE browser cannot cross domain through img.crossOrigin, use ajax to get image blob and then convert it to dataURL for display\n        const xhr = new XMLHttpRequest();\n        xhr.onloadend = function (e: any) {\n          const file = new FileReader(); // FileReader only supports IE10+\n          file.readAsDataURL(e.target.response);\n          file.onloadend = function (e) {\n            img.src = e?.target?.result as string;\n          };\n        };\n        xhr.open('GET', src);\n        xhr.responseType = 'blob';\n        xhr.send();\n      } else img.src = src;\n    };\n\n    (img as any).setSrc(getRandomImgSrc());\n    return img;\n  };\n\n  const draw = (img: HTMLImageElement) => {\n    const canvasCtx = canvasRef.current.getContext('2d');\n    const blockCtx = blockRef.current.getContext('2d');\n    // Create puzzle shapes at random positions\n    xRef.current = getRandomNumberByRange(L + 10, width - (L + 10));\n    yRef.current = getRandomNumberByRange(10 + r * 2, height - (L + 10));\n    drawPath(canvasCtx, xRef.current, yRef.current, 'fill');\n    drawPath(blockCtx, xRef.current, yRef.current, 'clip');\n\n    // draw into picture\n    canvasCtx.drawImage(img, 0, 0, width, height);\n    blockCtx.drawImage(img, 0, 0, width, height);\n\n    // Extract the slider and bring it to the far left\n    const y1 = yRef.current - r * 2 - 1;\n    const ImageData = blockCtx.getImageData(xRef.current - 3, y1, L, L);\n    blockRef.current.width = L;\n    blockCtx.putImageData(ImageData, 0, y1);\n  };\n\n  const initImg = () => {\n    const img = createImg(() => {\n      setLoading(false);\n      draw(img);\n    });\n    imgRef.current = img;\n  };\n\n  const reset = () => {\n    const canvasCtx = canvasRef.current.getContext('2d');\n    const blockCtx = blockRef.current.getContext('2d');\n    // reset style\n    setSliderLeft(0);\n    setSliderClass('sliderContainer');\n    blockRef.current.width = width;\n    blockRef.current.style.left = 0 + 'px';\n\n    // clear canvas\n    canvasCtx.clearRect(0, 0, width, height);\n    blockCtx.clearRect(0, 0, width, height);\n\n    // reload image\n    setLoading(true);\n    imgRef.current.setSrc(getRandomImgSrc());\n  };\n\n  const handleRefresh = () => {\n    reset();\n    typeof onRefresh === 'function' && onRefresh();\n  };\n\n  const verify = () => {\n    const arr = trailRef.current; // The moving distance of the y-axis when dragging\n    const average = arr.reduce(sum) / arr.length;\n    const deviations = arr.map((x) => x - average);\n    const stddev = Math.sqrt(deviations.map(square).reduce(sum) / arr.length);\n    const left = parseInt(blockRef.current.style.left);\n    return {\n      spliced: Math.abs(left - xRef.current) < 10,\n      verified: stddev !== 0, // Simply verify the drag trajectory, when it is zero, it means that there is no fluctuation up and down the Y axis, which may be non-human operation\n      left,\n      destX: xRef.current,\n    };\n  };\n\n  const handleDragStart = function (e: any) {\n    originXRef.current = e.clientX || e.touches[0].clientX;\n    originYRef.current = e.clientY || e.touches[0].clientY;\n    isMouseDownRef.current = true;\n  };\n\n  const handleDragMove = (e: any) => {\n    if (!isMouseDownRef.current) return false;\n    e.preventDefault();\n    const eventX = e.clientX || e.touches[0].clientX;\n    const eventY = e.clientY || e.touches[0].clientY;\n    const moveX = eventX - originXRef.current;\n    const moveY = eventY - originYRef.current;\n    if (moveX < 0 || moveX + 38 >= width) return false;\n    setSliderLeft(moveX);\n    const blockLeft = ((width - 40 - 20) / (width - 40)) * moveX;\n    blockRef.current.style.left = blockLeft + 'px';\n\n    setSliderClass('sliderContainer sliderContainer_active');\n    trailRef.current.push(moveY);\n    onDraw && onDraw(blockLeft);\n    return true;\n  };\n\n  const handleDragEnd = (e: any) => {\n    if (!isMouseDownRef.current) return false;\n    isMouseDownRef.current = false;\n    const eventX = e.clientX || e.changedTouches[0].clientX;\n    if (eventX === originXRef.current) return false;\n    setSliderClass('sliderContainer');\n    const { spliced, verified } = onCustomverify\n      ? onCustomverify(verify())\n      : verify();\n    if (spliced) {\n      if (verified) {\n        setSliderClass('sliderContainer sliderContainer_success');\n        typeof onSuccess === 'function' && onSuccess();\n      } else {\n        setSliderClass('sliderContainer sliderContainer_fail');\n        setTextTip('Please try again');\n        reset();\n      }\n    } else {\n      setSliderClass('sliderContainer sliderContainer_fail');\n      typeof onFail === 'function' && onFail();\n      setTimeout(() => {\n        reset();\n      }, 1000);\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    if (visible) {\n      imgRef.current ? reset() : initImg();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible]);\n\n  return (\n    <div\n      className=\"verifyWrap\"\n      style={{\n        width: width + 'px',\n        margin: '0 auto',\n        display: visible ? '' : 'none',\n      }}\n      onMouseMove={handleDragMove}\n      onMouseUp={handleDragEnd}\n      onTouchMove={handleDragMove}\n      onTouchEnd={handleDragEnd}\n    >\n      <div className=\"canvasArea\">\n        <canvas ref={canvasRef} width={width} height={height}></canvas>\n        <canvas\n          ref={blockRef}\n          className=\"block\"\n          width={width}\n          height={height}\n          onMouseDown={handleDragStart}\n          onTouchStart={handleDragStart}\n        ></canvas>\n      </div>\n      <div\n        className={sliderClass}\n        style={{\n          pointerEvents: isLoading ? 'none' : 'auto',\n          width: width + 'px',\n        }}\n      >\n        <div className=\"sliderMask\" style={{ width: sliderLeft + 'px' }}>\n          <div\n            className=\"slider\"\n            style={{ left: sliderLeft + 'px' }}\n            onMouseDown={handleDragStart}\n            onTouchStart={handleDragStart}\n          >\n            <div className=\"sliderIcon\">&rarr;</div>\n          </div>\n        </div>\n        <div className=\"sliderText\">{textTip}</div>\n      </div>\n      <div\n        className=\"refreshIcon\"\n        onClick={handleRefresh}\n        style={{ backgroundImage: `url(${refreshIcon})` }}\n      ></div>\n      <div\n        className=\"loadingContainer\"\n        style={{\n          width: width + 'px',\n          height: height + 'px',\n          display: isLoading ? '' : 'none',\n        }}\n      >\n        <div className=\"loadingIcon\"></div>\n        <span>Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Verify);\n"],"names":["getRandomNumberByRange","start","end","Math","round","random","sum","x","y","square","memo","_a","_b","width","_c","height","_d","l","_e","r","imgUrl","text","_f","refreshIcon","_g","visible","onDraw","onCustomverify","onSuccess","onFail","onRefresh","_h","useState","isLoading","setLoading","_j","sliderLeft","setSliderLeft","_k","sliderClass","setSliderClass","_l","textTip","setTextTip","canvasRef","useRef","blockRef","imgRef","isMouseDownRef","trailRef","originXRef","originYRef","xRef","yRef","PI","L","drawPath","ctx","operation","beginPath","moveTo","arc","lineTo","lineWidth","fillStyle","strokeStyle","stroke","globalCompositeOperation","fill","clip","getRandomImgSrc","concat","initImg","img","onload","Image","crossOrigin","onerror","setSrc","src","window","navigator","userAgent","indexOf","xhr","XMLHttpRequest","onloadend","e","file","FileReader","readAsDataURL","target","response","result","open","responseType","send","createImg","canvasCtx","current","getContext","blockCtx","drawImage","y1","ImageData","getImageData","putImageData","draw","reset","style","left","clearRect","verify","arr","average","reduce","length","deviations","map","stddev","sqrt","parseInt","spliced","abs","verified","destX","handleDragStart","clientX","touches","clientY","handleDragMove","preventDefault","eventX","eventY","moveX","moveY","blockLeft","push","handleDragEnd","changedTouches","setTimeout","useEffect","React","createElement","className","margin","display","onMouseMove","onMouseUp","onTouchMove","onTouchEnd","ref","onMouseDown","onTouchStart","pointerEvents","onClick","backgroundImage"],"mappings":"oCAAA,SAASA,EAAuBC,EAAeC,GAC7C,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAASA,EACpD,CAEA,SAASK,EAAIC,EAAWC,GACtB,OAAOD,EAAIC,CACb,CAEA,SAASC,EAAOF,GACd,OAAOA,EAAIA,CACb,CCmEA,IAyReG,EAAAA,EAAAA,MAzRA,SAACC,GACd,IAAAC,EAAAD,EAAAE,MAAAA,OAAQ,IAAAD,EAAA,IAAGA,EACXE,EAAYH,EAAAI,OAAZA,OAAM,IAAAD,EAAG,IAAGA,EACZE,EAAAL,EAAAM,EAAAA,OAAI,IAAAD,EAAA,GAAEA,EACNE,EAAKP,EAAAQ,EAALA,OAAC,IAAAD,EAAG,EAACA,EACLE,EAAMT,EAAAS,OACNC,EAAIV,EAAAU,KACJC,EAAAX,EAAAY,YAAAA,OAAc,IAAAD,EAAA,4FAA2FA,EACzGE,EAAcb,EAAAc,QAAdA,OAAO,IAAAD,GAAOA,EACdE,EAAMf,EAAAe,OACNC,EAAchB,EAAAgB,eACdC,EAASjB,EAAAiB,UACTC,EAAMlB,EAAAkB,OACNC,EAASnB,EAAAmB,UAEHC,EAA0BC,EAAAA,UAAS,GAAlCC,EAASF,EAAA,GAAEG,EAAUH,EAAA,GACtBI,EAA8BH,EAAAA,SAAS,GAAtCI,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC1BG,EAAgCN,EAAAA,SAAS,mBAAxCO,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAC5BG,EAAwBT,EAAAA,SAASX,GAAhCqB,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,EAAYC,SAAY,MACxBC,EAAWD,SAAY,MACvBE,EAASF,SAAY,MACrBG,EAAiBH,UAAgB,GACjCI,EAAWJ,SAAiB,IAC5BK,EAAaL,SAAe,GAC5BM,EAAaN,SAAe,GAC5BO,EAAOP,SAAe,GACtBQ,EAAOR,SAAe,GACtBS,EAAKnD,KAAKmD,GACVC,EAAItC,EAAQ,EAAJE,EAAQ,EAEhBqC,EAAW,SACfC,EACAlD,EACAC,EACAkD,GAEAD,EAAIE,YACJF,EAAIG,OAAOrD,EAAGC,GACdiD,EAAII,IAAItD,EAAIU,EAAI,EAAGT,EAAIW,EAAI,EAAGA,EAAG,IAAOmC,EAAI,KAAOA,GACnDG,EAAIK,OAAOvD,EAAIU,EAAGT,GAClBiD,EAAII,IAAItD,EAAIU,EAAIE,EAAI,EAAGX,EAAIS,EAAI,EAAGE,EAAG,KAAOmC,EAAI,KAAOA,GACvDG,EAAIK,OAAOvD,EAAIU,EAAGT,EAAIS,GACtBwC,EAAIK,OAAOvD,EAAGC,EAAIS,GAClBwC,EAAII,IAAItD,EAAIY,EAAI,EAAGX,EAAIS,EAAI,EAAGE,EAAI,GAAK,KAAOmC,EAAI,KAAOA,GAAI,GAC7DG,EAAIK,OAAOvD,EAAGC,GACdiD,EAAIM,UAAY,EAChBN,EAAIO,UAAY,2BAChBP,EAAIQ,YAAc,2BAClBR,EAAIS,SACJT,EAAIU,yBAA2B,mBACjB,SAAdT,EAAuBD,EAAIW,OAASX,EAAIY,MAC1C,EAEMC,EAAkB,WACtB,OACElD,GACA,4BAAAmD,OAA4BvE,EAC1B,EACA,MACG,KAAAuE,OAAA1D,EAAS,KAAA0D,OAAAxD,EAElB,EAoDMyD,EAAU,WACd,IAAMC,EAnDU,SAACC,GACjB,IAAMD,EAAM,IAAIE,MA0BhB,OAzBAF,EAAIG,YAAc,YAClBH,EAAIC,OAASA,EACbD,EAAII,QAAU,WACXJ,EAAYK,OAAOR,IACtB,EAECG,EAAYK,OAAS,SAACC,GAErB,GADaC,OAAOC,UAAUC,UAAUC,QAAQ,YAAc,EACpD,CAER,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,UAAY,SAAUC,GACxB,IAAMC,EAAO,IAAIC,WACjBD,EAAKE,cAAcH,EAAEI,OAAOC,UAC5BJ,EAAKF,UAAY,SAAUC,SACzBd,EAAIM,IAAe,QAATpE,EAAA4E,aAAC,EAADA,EAAGI,cAAM,IAAAhF,OAAA,EAAAA,EAAEkF,MACvB,CACF,EACAT,EAAIU,KAAK,MAAOf,GAChBK,EAAIW,aAAe,OACnBX,EAAIY,MACL,MAAMvB,EAAIM,IAAMA,CACnB,EAECN,EAAYK,OAAOR,KACbG,CACT,CAuBcwB,EAAU,WACpB/D,GAAW,GAtBF,SAACuC,GACZ,IAAMyB,EAAYtD,EAAUuD,QAAQC,WAAW,MACzCC,EAAWvD,EAASqD,QAAQC,WAAW,MAE7ChD,EAAK+C,QAAUnG,EAAuBuD,EAAI,GAAI1C,GAAS0C,EAAI,KAC3DF,EAAK8C,QAAUnG,EAAuB,GAAS,EAAJmB,EAAOJ,GAAUwC,EAAI,KAChEC,EAAS0C,EAAW9C,EAAK+C,QAAS9C,EAAK8C,QAAS,QAChD3C,EAAS6C,EAAUjD,EAAK+C,QAAS9C,EAAK8C,QAAS,QAG/CD,EAAUI,UAAU7B,EAAK,EAAG,EAAG5D,EAAOE,GACtCsF,EAASC,UAAU7B,EAAK,EAAG,EAAG5D,EAAOE,GAGrC,IAAMwF,EAAKlD,EAAK8C,QAAc,EAAJhF,EAAQ,EAC5BqF,EAAYH,EAASI,aAAarD,EAAK+C,QAAU,EAAGI,EAAIhD,EAAGA,GACjET,EAASqD,QAAQtF,MAAQ0C,EACzB8C,EAASK,aAAaF,EAAW,EAAGD,EACtC,CAKII,CAAKlC,EACP,IACA1B,EAAOoD,QAAU1B,CACnB,EAEMmC,EAAQ,WACZ,IAAMV,EAAYtD,EAAUuD,QAAQC,WAAW,MACzCC,EAAWvD,EAASqD,QAAQC,WAAW,MAE7C/D,EAAc,GACdG,EAAe,mBACfM,EAASqD,QAAQtF,MAAQA,EACzBiC,EAASqD,QAAQU,MAAMC,KAAO,MAG9BZ,EAAUa,UAAU,EAAG,EAAGlG,EAAOE,GACjCsF,EAASU,UAAU,EAAG,EAAGlG,EAAOE,GAGhCmB,GAAW,GACXa,EAAOoD,QAAQrB,OAAOR,IACxB,EAOM0C,EAAS,WACb,IAAMC,EAAMhE,EAASkD,QACfe,EAAUD,EAAIE,OAAO7G,GAAO2G,EAAIG,OAChCC,EAAaJ,EAAIK,KAAI,SAAC/G,GAAM,OAAAA,EAAI2G,CAAJ,IAC5BK,EAASpH,KAAKqH,KAAKH,EAAWC,IAAI7G,GAAQ0G,OAAO7G,GAAO2G,EAAIG,QAC5DN,EAAOW,SAAS3E,EAASqD,QAAQU,MAAMC,MAC7C,MAAO,CACLY,QAASvH,KAAKwH,IAAIb,EAAO1D,EAAK+C,SAAW,GACzCyB,SAAqB,IAAXL,EACVT,KAAIA,EACJe,MAAOzE,EAAK+C,QAEhB,EAEM2B,EAAkB,SAAUvC,GAChCrC,EAAWiD,QAAUZ,EAAEwC,SAAWxC,EAAEyC,QAAQ,GAAGD,QAC/C5E,EAAWgD,QAAUZ,EAAE0C,SAAW1C,EAAEyC,QAAQ,GAAGC,QAC/CjF,EAAemD,SAAU,CAC3B,EAEM+B,EAAiB,SAAC3C,GACtB,IAAKvC,EAAemD,QAAS,OAAO,EACpCZ,EAAE4C,iBACF,IAAMC,EAAS7C,EAAEwC,SAAWxC,EAAEyC,QAAQ,GAAGD,QACnCM,EAAS9C,EAAE0C,SAAW1C,EAAEyC,QAAQ,GAAGC,QACnCK,EAAQF,EAASlF,EAAWiD,QAC5BoC,EAAQF,EAASlF,EAAWgD,QAClC,GAAImC,EAAQ,GAAKA,EAAQ,IAAMzH,EAAO,OAAO,EAC7CwB,EAAciG,GACd,IAAME,GAAc3H,EAAQ,GAAK,KAAOA,EAAQ,IAAOyH,EAMvD,OALAxF,EAASqD,QAAQU,MAAMC,KAAO0B,EAAY,KAE1ChG,EAAe,0CACfS,EAASkD,QAAQsC,KAAKF,GACtB7G,GAAUA,EAAO8G,IACV,CACT,EAEME,GAAgB,SAACnD,GACrB,IAAKvC,EAAemD,QAAS,OAAO,EAGpC,GAFAnD,EAAemD,SAAU,GACVZ,EAAEwC,SAAWxC,EAAEoD,eAAe,GAAGZ,WACjC7E,EAAWiD,QAAS,OAAO,EAC1C3D,EAAe,mBACT,IAAA7B,EAAwBgB,EAC1BA,EAAeqF,KACfA,IAFIU,EAAO/G,EAAA+G,QAAEE,EAAQjH,EAAAiH,SAmBzB,OAhBIF,EACEE,GACFpF,EAAe,2CACM,mBAAdZ,GAA4BA,MAEnCY,EAAe,wCACfG,EAAW,oBACXiE,MAGFpE,EAAe,wCACG,mBAAXX,GAAyBA,IAChC+G,YAAW,WACThC,GACD,GAAE,OAEE,CACT,EASA,OAPAiC,EAAAA,WAAU,WACJpH,IACFsB,EAAOoD,QAAUS,IAAUpC,IAG/B,GAAG,CAAC/C,IAGFqH,EACEC,cAAA,MAAA,CAAAC,UAAU,aACVnC,MAAO,CACLhG,MAAOA,EAAQ,KACfoI,OAAQ,SACRC,QAASzH,EAAU,GAAK,QAE1B0H,YAAajB,EACbkB,UAAWV,GACXW,YAAanB,EACboB,WAAYZ,IAEZI,EAAKC,cAAA,MAAA,CAAAC,UAAU,cACbF,EAAQC,cAAA,SAAA,CAAAQ,IAAK3G,EAAW/B,MAAOA,EAAOE,OAAQA,IAC9C+H,EACEC,cAAA,SAAA,CAAAQ,IAAKzG,EACLkG,UAAU,QACVnI,MAAOA,EACPE,OAAQA,EACRyI,YAAa1B,EACb2B,aAAc3B,KAGlBgB,EAAAC,cAAA,MAAA,CACEC,UAAWzG,EACXsE,MAAO,CACL6C,cAAezH,EAAY,OAAS,OACpCpB,MAAOA,EAAQ,OAGjBiI,EAAAC,cAAA,MAAA,CAAKC,UAAU,aAAanC,MAAO,CAAEhG,MAAOuB,EAAa,OACvD0G,EACEC,cAAA,MAAA,CAAAC,UAAU,SACVnC,MAAO,CAAEC,KAAM1E,EAAa,MAC5BoH,YAAa1B,EACb2B,aAAc3B,GAEdgB,EAAAC,cAAA,MAAA,CAAKC,UAAU,cAAY,OAG/BF,EAAAC,cAAA,MAAA,CAAKC,UAAU,cAActG,IAE/BoG,EAAAC,cAAA,MAAA,CACEC,UAAU,cACVW,QA3HgB,WACpB/C,IACqB,mBAAd9E,GAA4BA,GACrC,EAyHM+E,MAAO,CAAE+C,gBAAiB,cAAOrI,EAAW,QAE9CuH,EAAAC,cAAA,MAAA,CACEC,UAAU,mBACVnC,MAAO,CACLhG,MAAOA,EAAQ,KACfE,OAAQA,EAAS,KACjBmI,QAASjH,EAAY,GAAK,SAG5B6G,EAAKC,cAAA,MAAA,CAAAC,UAAU,gBACfF,EAAuBC,cAAA,OAAA,KAAA,eAI/B"}